import numpy as np
from typing import Dict, List, Tuple, Union, Optional, Any

# Constants
GENERIC_ERROR = -1
GENERIC_OK = 0

def select_table_configuration(is_color: bool, is_negative: bool, patches_count: int) :
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –í–ê–®–ò–ú —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

    Args:
        is_color: True –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        is_negative: True –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –ø–ª–µ–Ω–∫–∏
        patches_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ç—á–µ–π

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã
    """
    # –ß–ë + –ø–æ–∑–∏—Ç–∏–≤ = –ó–ê–ü–†–ï–©–ï–ù–û
    if not is_color and not is_negative:
        raise ValueError("–ó–ê–ü–†–ï–©–ï–ù–ù–´–ô –ö–ï–ô–°: –ß–ë –ø–æ–∑–∏—Ç–∏–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")

    ret = {}
    # –ß–ë + –Ω–µ–≥–∞—Ç–∏–≤ = –≤—Å–µ–≥–¥–∞ bw_reversal
    if not is_color and is_negative:
        return {
            'dim_x': 8, 'dim_y': 4, 'dim_z': 12,
            'total_patches': 8 * 4 * 12,  # 384
            'drift_buffer': 200,
            'description': 'BW universal reversal with drift defence +-300K',
            'algorithm_params': {
                # interpolation options for BW reversal process
                'scenario': 'bw_reversal',
                'k_neighbors': 6,      # –ú–µ–Ω—å—à–µ —Å–æ—Å–µ–¥–µ–π (–ø—Ä–æ—â–µ –∑–∞–¥–∞—á–∞)
                'shepard_power': 1.5,  # –ú–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–µ—Å–∞
                'rbf_function': 'cubic',
                'rbf_smoothing': 0.05, # –ú–µ–Ω—å—à–µ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
                'outlier_filtering': False,
            },
            'quality_thresholds': {
                # quality metrics for Hybrid
                'boundary_clipping_threshold': 0.2,  # –°—Ç—Ä–æ–∂–µ –¥–ª—è –ß–ë
                'instability_threshold': 10.0,
                'extreme_values_threshold': 0.3
            },
            'correction_limits': {
                'hue': (-15.0, 15.0),  # –¥–ª—è bw_reversal
                'sat': (-0.5, 0.0),  # –¥–ª—è bw_reversal
                'val': (-0.4, 0.4)  # –¥–ª—è bw_reversal
            }

        }

    # –¶–≤–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ç—á–µ–π
    if patches_count < 100:
        # –ú–∞–ª–∞—è —Ç–∞–±–ª–∏—Ü–∞
        ret = {
            'table_type': 'small colors set',
            'dim_x': 8, 'dim_y': 4, 'dim_z': 4,
            'total_patches': 8 * 4 * 4,  # 128
            'drift_buffer': 200 if is_negative else 0,
            'description': f'Small Color Set 100- {"reversal +-300K" if is_negative else "positive"})'
        }
    elif patches_count <= 300:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è ColorChecker
        ret = {
            'table_type': 'colorchecker',
            'dim_x': 12, 'dim_y': 6, 'dim_z': 6,
            'total_patches': 12 * 6 * 6,  # 432
            'drift_buffer': 200 if is_negative else 0,
            'description': f'Medium Color Set 100-300 ,  {"reversal +-300K" if is_negative else "positive"})'
        }
    else:
        # –ë–æ–ª—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∞/–≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        ret = {
            'table_type': 'color_reversal',
            'dim_x': 24, 'dim_y': 8, 'dim_z': 6,
            'total_patches': 24 * 8 * 6,  # 1152
            'drift_buffer': 200 if is_negative else 0,
            'description': f'Big Color Set 300+,  {"reversal +-300K" if is_negative else "positive"})'
        }

    ret1 = {}
    if is_negative:
        ret1 = {'algorithm_params': {
                'scenario': 'color_reversal',
                'k_neighbors': 8,
                'shepard_power': 2,
                'rbf_function': 'thin_plate',
                'rbf_smoothing': 0.1,
                'outlier_filtering': True
            },
           'quality_thresholds': {  # quality metrics for Hybrid
                'boundary_clipping_threshold': 0.3,
                'instability_threshold': 15.0,
                'extreme_values_threshold': 0.4
            },
            'correction_limits': {
                'hue': (-30.0, 30.0),  # –ü–æ–ª–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                'sat': (-0.3, 0.3),  # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                'val': (-0.2, 0.2)  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ —è—Ä–∫–æ—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            }
        }

    else:
        ret1= {
            'algorithm_params': {
                'scenario': 'emulation',
                'k_neighbors': 12,     # –ë–æ–ª—å—à–µ —Å–æ—Å–µ–¥–µ–π (—Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞)
                'shepard_power': 2.5,  # –ë–æ–ª–µ–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                'rbf_function': 'multiquadric',
                'rbf_smoothing': 0.2,  # –ë–æ–ª—å—à–µ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
                'outlier_filtering': True,
            },
            'quality_thresholds': {
                # quality metrics for Hybrid
                'boundary_clipping_threshold': 0.5,  # –õ–∏–±–µ—Ä–∞–ª—å–Ω–µ–µ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏
                'instability_threshold': 20.0,
                'extreme_values_threshold': 0.6
            },
            'correction_limits': {
                'hue': (-45.0, 45.0),  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å–¥–≤–∏–≥–∏
                'sat': (-0.4, 0.6),  # –°–∏–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
                'val': (-0.3, 0.3)  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —è—Ä–∫–æ—Å—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            }
        }

    ret.update(ret1)
    return ret

def create_empty_hue_sat_table(config: Dict[str, Union[int, str]]) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è HSV —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Args:
        config: –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç select_table_configuration()

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
    """
    dim_x, dim_y, dim_z = config['dim_x'], config['dim_y'], config['dim_z']

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ numpy –º–∞—Å—Å–∏–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã HSV
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NaN –¥–ª—è —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö/–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
    empty_table = np.full((dim_x, dim_y, dim_z), np.nan, dtype=np.float32)

    return {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–ª—å—Ç (3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ HSV)
        'hue_deltas': empty_table.copy(),  # Œî Hue
        'sat_deltas': empty_table.copy(),  # Œî Saturation
        'val_deltas': empty_table.copy(),  # Œî Value/Lightness

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        'dimensions': {
            'hue_divisions': dim_x,  # –†–∞–∑–±–∏–µ–Ω–∏–π –ø–æ –æ—Ç—Ç–µ–Ω–∫—É
            'sat_divisions': dim_y,  # –†–∞–∑–±–∏–µ–Ω–∏–π –ø–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
            'val_divisions': dim_z  # –†–∞–∑–±–∏–µ–Ω–∏–π –ø–æ —è—Ä–∫–æ—Å—Ç–∏
        },

        # –ò–Ω–¥–µ–∫—Å—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç HSV –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        'coordinate_map': {
            'hue_coords': np.linspace(0.0, 360.0, dim_x, endpoint=False),  # 0-360¬∞
            'sat_coords': np.linspace(0.0, 1.0, dim_y),  # 0-1
            'val_coords': np.linspace(0.0, 1.0, dim_z)  # 0-1
        },

        # –ú–∞—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ False)
        'filled_mask': np.zeros((dim_x, dim_y, dim_z), dtype=bool),

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        'config_info': {
            'table_type': config['table_type'],
            'description': config['description'],
            'total_cells': dim_x * dim_y * dim_z,
            'drift_buffer': config.get('drift_buffer', 0)
        },
        'algorithm_params': config['algorithm_params'],
        'quality_thresholds': config['quality_thresholds'],
        'correction_limits': config['correction_limits']
    }


def populate_hue_sat_table(empty_table: Dict[str, Any], measured_patches: List[Dict]) -> Dict[str, Any]:
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç HSV —Ç–∞–±–ª–∏—Ü—É –¥–ª—è DCP –ø—Ä–æ—Ñ–∏–ª—è.

    DCP –ª–æ–≥–∏–∫–∞: –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ RGB –∫–∞–º–µ—Ä—ã ‚Üí —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ XYZ ‚Üí –¥–µ–ª—å—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞!

    Args:
        empty_table: –†–µ–∑—É–ª—å—Ç–∞—Ç create_empty_hue_sat_table()
        measured_patches: [{'RGB': [r,g,b], 'XYZ': [x,y,z]}, ...]
            –≥–¥–µ RGB = RAW‚ÜíRGB –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
            –≥–¥–µ XYZ = –∫–æ–ª–æ—Ä–∏–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω—ã
    """
    import colorsys

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —Å–µ—Ç–∫–∏
    hue_coords = empty_table['coordinate_map']['hue_coords']
    sat_coords = empty_table['coordinate_map']['sat_coords']
    val_coords = empty_table['coordinate_map']['val_coords']

    # –†–∞–±–æ—Ç–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
    hue_deltas = empty_table['hue_deltas']
    sat_deltas = empty_table['sat_deltas']
    val_deltas = empty_table['val_deltas']
    filled_mask = empty_table['filled_mask']

    mapped_patches = 0

    for patch in measured_patches:
        # üéØ 1. RGB –ö–ê–ú–ï–†–´ (—á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä—ã)
        camera_rgb = np.array(patch['RGB'])

        # üéØ 2. –≠–¢–ê–õ–û–ù–ù–´–ï XYZ (–∫–æ–ª–æ—Ä–∏–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ)
        reference_xyz = np.array(patch['XYZ'])

        # üéØ 3. Camera RGB ‚Üí HSV (–¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ)
        camera_rgb_norm = camera_rgb / 255.0 if np.max(camera_rgb) > 1.0 else camera_rgb
        camera_rgb_norm = np.clip(camera_rgb_norm, 0, 1)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

        camera_hsv_raw = colorsys.rgb_to_hsv(camera_rgb_norm[0], camera_rgb_norm[1], camera_rgb_norm[2])
        camera_hsv = np.array([
            camera_hsv_raw[0] * 360.0,  # H: 0-360¬∞
            camera_hsv_raw[1],  # S: 0-1
            camera_hsv_raw[2]  # V: 0-1
        ])

        # üéØ 4. Reference XYZ ‚Üí "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π" RGB
        # –î–ª—è DCP –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–ê–ù–î–ê–†–¢–ù–û–ï —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–æ–±—ã—á–Ω–æ ProPhoto/sRGB)
        reference_rgb = xyz_to_camera_rgb(reference_xyz)
        reference_rgb_norm = reference_rgb / 255.0 if np.max(reference_rgb) > 1.0 else reference_rgb
        reference_rgb_norm = np.clip(reference_rgb_norm, 0, 1)

        # üéØ 5. Reference RGB ‚Üí HSV (—Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        reference_hsv_raw = colorsys.rgb_to_hsv(reference_rgb_norm[0], reference_rgb_norm[1], reference_rgb_norm[2])
        reference_hsv = np.array([
            reference_hsv_raw[0] * 360.0,
            reference_hsv_raw[1],
            reference_hsv_raw[2]
        ])

        # üéØ 6. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ HSV –ö–ê–ú–ï–†–´ (–Ω–µ —ç—Ç–∞–ª–æ–Ω–∞!)
        h_idx = np.argmin(np.abs(hue_coords - camera_hsv[0]))
        s_idx = np.argmin(np.abs(sat_coords - camera_hsv[1]))
        v_idx = np.argmin(np.abs(val_coords - camera_hsv[2]))

        # üéØ 7. –î–µ–ª—å—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ = (—ç—Ç–∞–ª–æ–Ω - –∫–∞–º–µ—Ä–∞)
        delta_h = reference_hsv[0] - camera_hsv[0]
        delta_s = reference_hsv[1] - camera_hsv[1]
        delta_v = reference_hsv[2] - camera_hsv[2]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ Hue
        if delta_h > 180:
            delta_h -= 360
        elif delta_h < -180:
            delta_h += 360

        # üéØ 8. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É
        if not filled_mask[h_idx, s_idx, v_idx]:
            hue_deltas[h_idx, s_idx, v_idx] = delta_h
            sat_deltas[h_idx, s_idx, v_idx] = delta_s
            val_deltas[h_idx, s_idx, v_idx] = delta_v
            filled_mask[h_idx, s_idx, v_idx] = True
            mapped_patches += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    empty_table['config_info']['filled_cells'] = np.sum(filled_mask)
    empty_table['config_info']['fill_ratio'] = (
            empty_table['config_info']['filled_cells'] /
            empty_table['config_info']['total_cells']
    )
    empty_table['config_info']['mapped_patches'] = mapped_patches
    empty_table['config_info']['total_input_patches'] = len(measured_patches)

    return empty_table


def xyz_to_camera_rgb(xyz):
    """
    XYZ ‚Üí RGB –¥–ª—è DCP –ø—Ä–æ—Ñ–∏–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ DCP (–æ–±—ã—á–Ω–æ –±–ª–∏–∑–∫–æ–µ –∫ ProPhoto).
    """
    # DCP –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∏—Ä–æ–∫–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    # –ú–∞—Ç—Ä–∏—Ü–∞ ProPhoto RGB (D50 illuminant, —á—Ç–æ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ DCP)
    M = np.array([
        [1.3460, -0.2556, -0.0511],
        [-0.5446, 1.5082, 0.0205],
        [0.0000, 0.0000, 1.2123]
    ])

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è XYZ (Y=100 –¥–ª—è –±–µ–ª–æ–π —Ç–æ—á–∫–∏)
    xyz_norm = xyz / 100.0 if np.max(xyz) > 1.0 else xyz

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
    rgb_linear = M @ xyz_norm

    # –ì–∞–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (–æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—Ç–∞—è 2.2 –¥–ª—è DCP)
    rgb_gamma = np.power(np.abs(rgb_linear), 1 / 2.2) * np.sign(rgb_linear)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-255 (–Ω–æ –±–µ–∑ –∂–µ—Å—Ç–∫–æ–≥–æ clipping)
    return rgb_gamma * 255


def interpolate_color_correction_sheppard(populated_table: Dict[str, Any]) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Shepard + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - Shepard interpolation (IDW) –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    - –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    Args:
        populated_table: –†–µ–∑—É–ª—å—Ç–∞—Ç populate_hue_sat_table() —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏

    Returns:
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è HSV —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    """
    from scipy.spatial import KDTree

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    hue_deltas = populated_table['hue_deltas']
    sat_deltas = populated_table['sat_deltas']
    val_deltas = populated_table['val_deltas']
    filled_mask = populated_table['filled_mask']

    coordinate_map = populated_table['coordinate_map']
    hue_coords = coordinate_map['hue_coords']
    sat_coords = coordinate_map['sat_coords']
    val_coords = coordinate_map['val_coords']

    # –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    algorithm_params = populated_table['algorithm_params']
    correction_limits = populated_table['correction_limits']
    scenario = algorithm_params['scenario']

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
    n_hue, n_sat, n_val = hue_deltas.shape

    print(f"üéØ Shepard Interpolation [{scenario.upper()}]:")
    print(f"   Grid: {n_hue}√ó{n_sat}√ó{n_val} = {n_hue * n_sat * n_val} cells")
    print(f"   Filled: {np.sum(filled_mask)} ({np.sum(filled_mask) / (n_hue * n_sat * n_val) * 100:.1f}%)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if np.sum(filled_mask) < 4:
        print("‚ùå Insufficient data for interpolation (need ‚â•4 points)")
        return populated_table

    # 1. –°–æ–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ)
    filled_indices = np.where(filled_mask)
    n_known = len(filled_indices[0])

    # HSV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
    known_hsv = np.column_stack([
        hue_coords[filled_indices[0]],
        sat_coords[filled_indices[1]],
        val_coords[filled_indices[2]]
    ])

    # HSV –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    known_corrections = np.column_stack([
        hue_deltas[filled_mask],
        sat_deltas[filled_mask],
        val_deltas[filled_mask]
    ])

    print(f"   Known points: {n_known}")

    # 2. –°–æ–∑–¥–∞–µ–º KDTree –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
    spatial_index = KDTree(known_hsv)

    # 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    empty_mask = ~filled_mask
    empty_indices = np.where(empty_mask)
    n_empty = len(empty_indices[0])

    if n_empty == 0:
        print("‚úÖ All cells already filled")
        return populated_table

    # HSV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É—Å—Ç—ã—Ö —Ç–æ—á–µ–∫
    target_hsv = np.column_stack([
        hue_coords[empty_indices[0]],
        sat_coords[empty_indices[1]],
        val_coords[empty_indices[2]]
    ])

    print(f"   Target points: {n_empty}")

    # 4. –ù–û–í–û–ï: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    k_neighbors = min(algorithm_params['k_neighbors'], n_known)  # –ù–µ –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å —Ç–æ—á–µ–∫
    shepard_power = algorithm_params['shepard_power']

    print(f"   Using {k_neighbors} neighbors, Shepard power={shepard_power}")

    # 5. –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ k –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
    distances, neighbor_indices = spatial_index.query(target_hsv, k=k_neighbors)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ (distances –º–æ–∂–µ—Ç –±—ã—Ç—å 1D)
    if k_neighbors == 1:
        distances = distances.reshape(-1, 1)
        neighbor_indices = neighbor_indices.reshape(-1, 1)

    # 6. –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ Shepard
    # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–æ—á–µ–∫
    epsilon = 1e-12
    safe_distances = np.maximum(distances, epsilon)

    # –í–µ—Å–∞ Shepard: w_i = 1 / d_i^p
    shepard_weights = 1.0 / (safe_distances ** shepard_power)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ (—Å—É–º–º–∞ = 1 –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏)
    weight_sums = np.sum(shepard_weights, axis=1, keepdims=True)
    normalized_weights = shepard_weights / weight_sums

    # 7. –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    interpolated_corrections = np.zeros((n_empty, 3))

    for comp in range(3):  # H, S, V –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        neighbor_values = known_corrections[neighbor_indices, comp]  # shape: (n_empty, k_neighbors)

        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
        interpolated_corrections[:, comp] = np.sum(
            normalized_weights * neighbor_values, axis=1
        )

    print("‚úÖ Shepard interpolation completed")

    # 8. –ù–û–í–û–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    hue_limits = correction_limits['hue']
    sat_limits = correction_limits['sat']
    val_limits = correction_limits['val']

    interpolated_corrections[:, 0] = np.clip(interpolated_corrections[:, 0], hue_limits[0], hue_limits[1])
    interpolated_corrections[:, 1] = np.clip(interpolated_corrections[:, 1], sat_limits[0], sat_limits[1])
    interpolated_corrections[:, 2] = np.clip(interpolated_corrections[:, 2], val_limits[0], val_limits[1])

    # 9. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ –º–∞—Å—Å–∏–≤—ã
    result_hue_deltas = hue_deltas.copy()
    result_sat_deltas = sat_deltas.copy()
    result_val_deltas = val_deltas.copy()

    # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_hue_deltas[empty_mask] = interpolated_corrections[:, 0]
    result_sat_deltas[empty_mask] = interpolated_corrections[:, 1]
    result_val_deltas[empty_mask] = interpolated_corrections[:, 2]

    # 10. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
    result_table = populated_table.copy()
    result_table['hue_deltas'] = result_hue_deltas
    result_table['sat_deltas'] = result_sat_deltas
    result_table['val_deltas'] = result_val_deltas
    result_table['filled_mask'] = np.ones_like(filled_mask, dtype=bool)  # –í—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

    # 11. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    result_table['config_info']['interpolation_method'] = f'shepard_{scenario}'
    result_table['config_info']['filled_cells'] = n_hue * n_sat * n_val
    result_table['config_info']['fill_ratio'] = 1.0
    result_table['config_info']['interpolated_cells'] = n_empty
    result_table['config_info']['k_neighbors'] = k_neighbors
    result_table['config_info']['shepard_power'] = shepard_power

    # –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    result_table['config_info']['applied_limits'] = {
        'hue_delta_range': hue_limits,
        'sat_delta_range': sat_limits,
        'val_delta_range': val_limits
    }

    print(f"‚úÖ {scenario.capitalize()} Shepard interpolation completed:")
    print(f"   Interpolated: {n_empty} new cells")
    print(f"   Method: Shepard IDW (k={k_neighbors}, p={shepard_power})")
    print(f"   Applied limits: Hue {hue_limits}, Sat {sat_limits}, Val {val_limits}")

    return result_table


def interpolate_color_correction_rbf(populated_table: Dict[str, Any],
                                     fallback_for_shepard: bool = False) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è RBF –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫:
    1. Standalone –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    2. Fallback –∫–æ–≥–¥–∞ Shepard –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RBF –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    - –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    - –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    Args:
        populated_table: –†–µ–∑—É–ª—å—Ç–∞—Ç populate_hue_sat_table() —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
        fallback_for_shepard: True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –ø–æ—Å–ª–µ Shepard

    Returns:
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è HSV —Ç–∞–±–ª–∏—Ü–∞ —Å RBF –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    """
    from scipy.interpolate import Rbf
    import warnings

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    hue_deltas = populated_table['hue_deltas']
    sat_deltas = populated_table['sat_deltas']
    val_deltas = populated_table['val_deltas']
    filled_mask = populated_table['filled_mask']

    coordinate_map = populated_table['coordinate_map']
    hue_coords = coordinate_map['hue_coords']
    sat_coords = coordinate_map['sat_coords']
    val_coords = coordinate_map['val_coords']

    # –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    algorithm_params = populated_table['algorithm_params']
    correction_limits = populated_table['correction_limits']
    scenario = algorithm_params['scenario']

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
    n_hue, n_sat, n_val = hue_deltas.shape

    method_name = "RBF Fallback" if fallback_for_shepard else "RBF Primary"
    print(f"üßÆ {method_name} [{scenario.upper()}]:")
    print(f"   Grid: {n_hue}√ó{n_sat}√ó{n_val} = {n_hue * n_sat * n_val} cells")
    print(f"   Filled: {np.sum(filled_mask)} ({np.sum(filled_mask) / (n_hue * n_sat * n_val) * 100:.1f}%)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RBF
    min_points_required = 6  # RBF –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ —á–µ–º Shepard
    if np.sum(filled_mask) < min_points_required:
        print(f"‚ùå Insufficient data for RBF interpolation (need ‚â•{min_points_required} points)")
        return populated_table

    # 1. –°–æ–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ)
    filled_indices = np.where(filled_mask)
    n_known = len(filled_indices[0])

    # HSV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
    known_hsv = np.column_stack([
        hue_coords[filled_indices[0]],
        sat_coords[filled_indices[1]],
        val_coords[filled_indices[2]]
    ])

    # HSV –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    known_corrections = np.column_stack([
        hue_deltas[filled_mask],
        sat_deltas[filled_mask],
        val_deltas[filled_mask]
    ])

    print(f"   Known points: {n_known}")

    # 2. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    empty_mask = ~filled_mask
    empty_indices = np.where(empty_mask)
    n_empty = len(empty_indices[0])

    if n_empty == 0:
        print("‚úÖ All cells already filled")
        return populated_table

    # HSV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É—Å—Ç—ã—Ö —Ç–æ—á–µ–∫
    target_hsv = np.column_stack([
        hue_coords[empty_indices[0]],
        sat_coords[empty_indices[1]],
        val_coords[empty_indices[2]]
    ])

    print(f"   Target points: {n_empty}")

    # 3. –ù–û–í–û–ï: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RBF –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    rbf_function = algorithm_params['rbf_function']
    smoothing = algorithm_params['rbf_smoothing']

    print(f"   RBF function: {rbf_function}, smoothing: {smoothing}")

    # 4. –°–æ–∑–¥–∞–µ–º RBF –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    interpolated_corrections = np.zeros((n_empty, 3))

    # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è RBF –æ –ø–ª–æ—Ö–æ–π –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=RuntimeWarning)

        try:
            for comp in range(3):  # H, S, V –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                component_name = ['Hue', 'Saturation', 'Value'][comp]
                print(f"   Processing {component_name}...")

                # –°–æ–∑–¥–∞–µ–º RBF –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                rbf_interpolator = Rbf(
                    known_hsv[:, 0],  # H –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    known_hsv[:, 1],  # S –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    known_hsv[:, 2],  # V –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    known_corrections[:, comp],  # –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–π
                    function=rbf_function,
                    smooth=smoothing
                )

                # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
                interpolated_values = rbf_interpolator(
                    target_hsv[:, 0],  # H —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
                    target_hsv[:, 1],  # S —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
                    target_hsv[:, 2]  # V —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
                )

                interpolated_corrections[:, comp] = interpolated_values

        except Exception as e:
            print(f"‚ùå RBF interpolation failed: {e}")

            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å—Ä–µ–¥–Ω–µ–º—É
            print("   Using average fallback...")
            mean_corrections = np.mean(known_corrections, axis=0)
            interpolated_corrections = np.tile(mean_corrections, (n_empty, 1))

    print("‚úÖ RBF interpolation completed")

    # 5. –ù–û–í–û–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    hue_limits = correction_limits['hue']
    sat_limits = correction_limits['sat']
    val_limits = correction_limits['val']

    interpolated_corrections[:, 0] = np.clip(interpolated_corrections[:, 0], hue_limits[0], hue_limits[1])
    interpolated_corrections[:, 1] = np.clip(interpolated_corrections[:, 1], sat_limits[0], sat_limits[1])
    interpolated_corrections[:, 2] = np.clip(interpolated_corrections[:, 2], val_limits[0], val_limits[1])

    # 6. –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if algorithm_params.get('outlier_filtering', False):
        for comp in range(3):
            values = interpolated_corrections[:, comp]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            q75, q25 = np.percentile(values, [75, 25])
            iqr = q75 - q25
            outlier_threshold = 2.0  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥

            lower_bound = q25 - outlier_threshold * iqr
            upper_bound = q75 + outlier_threshold * iqr

            # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–±—Ä–æ—Å—ã –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            median_value = np.median(values)
            outlier_mask = (values < lower_bound) | (values > upper_bound)

            if np.any(outlier_mask):
                interpolated_corrections[outlier_mask, comp] = median_value
                n_outliers = np.sum(outlier_mask)
                component_name = ['Hue', 'Saturation', 'Value'][comp]
                print(f"   Filtered {n_outliers} {component_name} outliers")

    # 7. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ –º–∞—Å—Å–∏–≤—ã
    result_hue_deltas = hue_deltas.copy()
    result_sat_deltas = sat_deltas.copy()
    result_val_deltas = val_deltas.copy()

    # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_hue_deltas[empty_mask] = interpolated_corrections[:, 0]
    result_sat_deltas[empty_mask] = interpolated_corrections[:, 1]
    result_val_deltas[empty_mask] = interpolated_corrections[:, 2]

    # 8. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
    result_table = populated_table.copy()
    result_table['hue_deltas'] = result_hue_deltas
    result_table['sat_deltas'] = result_sat_deltas
    result_table['val_deltas'] = result_val_deltas
    result_table['filled_mask'] = np.ones_like(filled_mask, dtype=bool)  # –í—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

    # 9. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    method_key = f'rbf_fallback_{scenario}' if fallback_for_shepard else f'rbf_{scenario}'
    result_table['config_info']['interpolation_method'] = method_key
    result_table['config_info']['filled_cells'] = n_hue * n_sat * n_val
    result_table['config_info']['fill_ratio'] = 1.0
    result_table['config_info']['interpolated_cells'] = n_empty
    result_table['config_info']['rbf_function'] = rbf_function
    result_table['config_info']['rbf_smoothing'] = smoothing

    # –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    result_table['config_info']['applied_limits'] = {
        'hue_delta_range': hue_limits,
        'sat_delta_range': sat_limits,
        'val_delta_range': val_limits
    }

    result_table['config_info']['outlier_filtering'] = algorithm_params.get('outlier_filtering', False)

    print(f"‚úÖ {scenario.capitalize()} RBF interpolation completed:")
    print(f"   Interpolated: {n_empty} new cells")
    print(f"   Method: {rbf_function} RBF (smoothing={smoothing})")
    print(f"   Applied limits: Hue {hue_limits}, Sat {sat_limits}, Val {val_limits}")
    print(f"   Outlier filtering: {algorithm_params.get('outlier_filtering', False)}")

    return result_table


def interpolate_color_correction_hybrid(populated_table: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π Shepard + RBF –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü—ã—Ç–∞–µ—Ç—Å—è Shepard –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
    2. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    3. –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–æ–µ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ RBF

    Args:
        populated_table: –†–µ–∑—É–ª—å—Ç–∞—Ç populate_hue_sat_table()

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–µ–≥–æ –∏–∑ –º–µ—Ç–æ–¥–æ–≤
    """
    # –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    algorithm_params = populated_table['algorithm_params']
    quality_thresholds = populated_table['quality_thresholds']
    scenario = algorithm_params['scenario']

    print(f"üîÑ Hybrid Shepard+RBF [{scenario.upper()}]:")

    # 1. –ü—Ä–æ–±—É–µ–º Shepard –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
    print("   Step 1: Trying Shepard interpolation...")
    shepard_result = interpolate_color_correction_sheppard(populated_table)

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ Shepard —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    filled_mask = populated_table['filled_mask']
    empty_mask = ~filled_mask
    n_empty = np.sum(empty_mask)

    if n_empty == 0:
        print("   All cells already filled - using Shepard result")
        return shepard_result

    # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    shepard_hue_values = shepard_result['hue_deltas'][empty_mask]
    shepard_sat_values = shepard_result['sat_deltas'][empty_mask]
    shepard_val_values = shepard_result['val_deltas'][empty_mask]

    # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    boundary_threshold = quality_thresholds['boundary_clipping_threshold']
    instability_threshold = quality_thresholds['instability_threshold']
    extreme_threshold = quality_thresholds['extreme_values_threshold']

    # –§–ª–∞–≥–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    quality_issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö (–ø—Ä–∏–∑–Ω–∞–∫ –∫–ª–∏–ø–ø–∏–Ω–≥–∞)
    correction_limits = populated_table['correction_limits']
    hue_limits = correction_limits['hue']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º (90% –æ—Ç –ª–∏–º–∏—Ç–∞)
    hue_near_boundary = np.mean(np.abs(shepard_hue_values) > abs(hue_limits[1]) * 0.9)
    if hue_near_boundary > boundary_threshold:
        quality_issues.append(f"Hue clipping: {hue_near_boundary * 100:.1f}%")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)
    hue_std = np.std(shepard_hue_values)
    if hue_std > instability_threshold:
        quality_issues.append(f"Hue instability: œÉ={hue_std:.1f}¬∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    hue_extreme = np.abs(shepard_hue_values) > abs(hue_limits[1]) * 0.7
    sat_extreme = np.abs(shepard_sat_values) > max(abs(correction_limits['sat'][0]),
                                                   abs(correction_limits['sat'][1])) * 0.7
    val_extreme = np.abs(shepard_val_values) > max(abs(correction_limits['val'][0]),
                                                   abs(correction_limits['val'][1])) * 0.7

    extreme_values_ratio = np.mean(hue_extreme | sat_extreme | val_extreme)
    if extreme_values_ratio > extreme_threshold:
        quality_issues.append(f"Extreme values: {extreme_values_ratio * 100:.1f}%")

    # 3. –†–µ—à–µ–Ω–∏–µ –æ –º–µ—Ç–æ–¥–µ
    if len(quality_issues) == 0:
        print("   Step 2: Shepard quality OK - using Shepard result")
        shepard_result['config_info']['quality_check'] = "passed"
        return shepard_result
    else:
        print(f"   Step 2: Shepard quality issues detected:")
        for issue in quality_issues:
            print(f"            - {issue}")
        print("   Step 3: Switching to RBF fallback...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RBF –∫–∞–∫ fallback
        rbf_result = interpolate_color_correction_rbf(populated_table, fallback_for_shepard=True)
        rbf_result['config_info']['quality_check'] = f"shepard_failed: {'; '.join(quality_issues)}"
        rbf_result['config_info']['hybrid_decision'] = "rbf_chosen"

        return rbf_result


def generate_hue_sat_deltas_data(interpolated_table: Dict[str, Any]) -> np.ndarray:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ DCP —Ç–µ–≥ HueSatDeltas1 (ID 50708).

    –§–æ—Ä–º–∞—Ç Adobe DCP: –º–∞—Å—Å–∏–≤ float32 –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ:
    [hue0_sat0_val0_delta_h, hue0_sat0_val0_delta_s, hue0_sat0_val0_delta_v,
     hue0_sat0_val1_delta_h, hue0_sat0_val1_delta_s, hue0_sat0_val1_delta_v, ...]

    Args:
        interpolated_table: –†–µ–∑—É–ª—å—Ç–∞—Ç interpolate_color_correction_*() —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        np.ndarray: –ü–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ float32 –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ DCP
    """

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª—å—Ç—ã
    hue_deltas = interpolated_table['hue_deltas']
    sat_deltas = interpolated_table['sat_deltas']
    val_deltas = interpolated_table['val_deltas']

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
    dim_x, dim_y, dim_z = hue_deltas.shape

    print(f"üìä Generating HueSatDeltas1 data:")
    print(f"   Grid dimensions: {dim_x}H √ó {dim_y}S √ó {dim_z}V")
    print(f"   Total cells: {dim_x * dim_y * dim_z}")

    # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤ Adobe DCP –ø–æ—Ä—è–¥–∫–µ
    # Adobe –ø–æ—Ä—è–¥–æ–∫: –¥–ª—è –∫–∞–∂–¥–æ–π HSV —è—á–µ–π–∫–∏ [delta_h, delta_s, delta_v]
    total_values = dim_x * dim_y * dim_z * 3  # 3 –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —è—á–µ–π–∫—É
    dcp_data = np.zeros(total_values, dtype=np.float32)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (H –≤–Ω–µ—à–Ω–∏–π, V –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)
    index = 0
    for h in range(dim_x):  # Hue (–≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª)
        for s in range(dim_y):  # Saturation
            for v in range(dim_z):  # Value (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª)
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–æ–π–∫—É [delta_h, delta_s, delta_v]
                dcp_data[index] = hue_deltas[h, s, v]  # Delta Hue
                dcp_data[index + 1] = sat_deltas[h, s, v]  # Delta Saturation
                dcp_data[index + 2] = val_deltas[h, s, v]  # Delta Value
                index += 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã (Adobe DCP —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è)
    hue_range = (np.min(dcp_data[0::3]), np.max(dcp_data[0::3]))
    sat_range = (np.min(dcp_data[1::3]), np.max(dcp_data[1::3]))
    val_range = (np.min(dcp_data[2::3]), np.max(dcp_data[2::3]))

    print(f"   Hue deltas range: [{hue_range[0]:.2f}, {hue_range[1]:.2f}]")
    print(f"   Sat deltas range: [{sat_range[0]:.3f}, {sat_range[1]:.3f}]")
    print(f"   Val deltas range: [{val_range[0]:.3f}, {val_range[1]:.3f}]")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    scenario = interpolated_table['algorithm_params']['scenario']
    config_info = interpolated_table.get('config_info', {})
    interpolation_method = config_info.get('interpolation_method', 'unknown')

    print(f"   Scenario: {scenario}")
    print(f"   Method: {interpolation_method}")
    print(f"   Data size: {len(dcp_data)} values ({len(dcp_data) * 4} bytes)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ Inf
    invalid_count = np.sum(~np.isfinite(dcp_data))
    if invalid_count > 0:
        print(f"‚ö†Ô∏è  Warning: {invalid_count} invalid values (NaN/Inf) found - replacing with 0.0")
        dcp_data[~np.isfinite(dcp_data)] = 0.0

    print("‚úÖ HueSatDeltas1 data generated successfully")

    return dcp_data



# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π main —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π HSL —Ç–∞–±–ª–∏—Ü
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ç—á–µ–π
    test_patches = [
        {'SAMPLE_ID': "A01", 'RGB': [13.14600, 12.61100, 11.97300], 'XYZ': [11.773, 10.213, 4.9219]},
        {'SAMPLE_ID': "A02", 'RGB': [49.23000, 48.11800, 46.60800], 'XYZ': [40.174, 36.201, 20.217]},
        {'SAMPLE_ID': "A03", 'RGB': [29.93600, 33.49200, 36.75300], 'XYZ': [17.675, 19.409, 26.983]},
        {'SAMPLE_ID': "A04", 'RGB': [16.18700, 16.10500, 15.79200], 'XYZ': [11.121, 13.530, 5.5615]},
        {'SAMPLE_ID': "A05", 'RGB': [37.11300, 40.82200, 44.24100], 'XYZ': [25.551, 24.404, 34.847]},
        {'SAMPLE_ID': "A06", 'RGB': [55.87600, 60.32000, 63.95600], 'XYZ': [31.744, 43.164, 35.249]},
        {'SAMPLE_ID': "B01", 'RGB': [38.36500, 33.18200, 27.80300], 'XYZ': [40.056, 30.947, 4.8180]},
        {'SAMPLE_ID': "B02", 'RGB': [23.29900, 28.08500, 32.73500], 'XYZ': [12.544, 11.700, 28.648]},
        {'SAMPLE_ID': "B03", 'RGB': [28.29200, 25.49000, 22.66000], 'XYZ': [30.675, 20.352, 10.837]},
        {'SAMPLE_ID': "B04", 'RGB': [12.13300, 13.14800, 14.11400], 'XYZ': [8.3961, 6.5047, 10.849]},
        {'SAMPLE_ID': "B05", 'RGB': [50.17500, 47.95100, 44.94500], 'XYZ': [36.036, 44.991, 8.9494]},
        {'SAMPLE_ID': "B06", 'RGB': [50.21800, 44.50400, 38.35600], 'XYZ': [50.203, 44.570, 6.2773]},
        {'SAMPLE_ID': "C01", 'RGB': [14.62200, 18.32500, 21.96600], 'XYZ': [7.4590, 6.0952, 23.518]},
        {'SAMPLE_ID': "C02", 'RGB': [28.59500, 29.13500, 29.15000], 'XYZ': [15.439, 23.986, 7.7482]},
        {'SAMPLE_ID': "C03", 'RGB': [20.01200, 17.08800, 14.18100], 'XYZ': [22.850, 13.022, 4.1188]},
        {'SAMPLE_ID': "C04", 'RGB': [70.29800, 63.37900, 55.64300], 'XYZ': [59.637, 60.332, 7.3520]},
        {'SAMPLE_ID': "C05", 'RGB': [34.13700, 33.98400, 33.80200], 'XYZ': [30.450, 20.015, 22.947]},
        {'SAMPLE_ID': "C06", 'RGB': [31.93000, 37.25800, 42.17200], 'XYZ': [13.591, 19.466, 30.479]},
        {'SAMPLE_ID': "D01", 'RGB': [128.9290, 133.0470, 135.8290], 'XYZ': [86.776, 90.361, 70.642]},
        {'SAMPLE_ID': "D02", 'RGB': [87.82600, 91.24800, 93.76600], 'XYZ': [56.865, 59.038, 48.218]},
        {'SAMPLE_ID': "D03", 'RGB': [56.62100, 58.95000, 60.69400], 'XYZ': [34.763, 36.036, 29.378]},
        {'SAMPLE_ID': "D04", 'RGB': [29.61600, 30.76700, 31.61300], 'XYZ': [18.884, 19.603, 16.309]},
        {'SAMPLE_ID': "D05", 'RGB': [14.99100, 15.62700, 16.10700], 'XYZ': [8.4332, 8.7464, 7.1022]},
        {'SAMPLE_ID': "D06", 'RGB': [5.802000, 6.080000, 6.296000], 'XYZ': [3.0110, 3.0971, 2.5475]}
    ]

    print("üß™ –¢–ï–°–¢ 1: –¶–≤–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ç–∏–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ç—á–µ–π")
    config = select_table_configuration(is_color=True, is_negative=False, patches_count=150)
    empty_table = create_empty_hue_sat_table(config)
    populated_table = populate_hue_sat_table(empty_table, test_patches)
    rez = interpolate_color_correction_hybrid(populated_table)
    dcp_data = generate_hue_sat_deltas_data(rez)

    print(rez)
    # 2. –†–ê–ó–ù–ê–Ø –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
    #if scenario == "reverse":
    #    final_table = interpolate_reverse_case(populated_table)
    #elif scenario == "bw_reverse":  # ‚Üê –ü–û–¢–ï–†–Ø–ù–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô!
    #    final_table = interpolate_bw_reverse(populated_table)
    #elif scenario == "color_correction":
    #    final_table = interpolate_color_correction(populated_table)

